---
title: "assessment1"
---

Ana Grisanti
WB STC R Assessment
Global Poverty and Inequality Data Team 

```{r}
rm(list = ls())

#Loading WDI dataset
tag      <- "202311081903"
base_url <- "https://github.com/randrescastaneda/pub_data/raw/"
data_url <- paste0(base_url, tag, "/data/Rtest1/")

wdi <- readr::read_rds(paste0(data_url, "wdi_in1.Rds"))

#Installing necessary packages and calling the libraries
#install.packages('doBy')
#install.packages('pracma')
#install.packages('ddpcr')
library(ddpcr)
library(pracma)
library(doBy)
library(collapse)
library(dplyr)
library(tidyverse)
library(tidyr)
```

1.  Summary Statistics of GDP per capita by region

```{r}
#Generating new dataset with summary statistics of GDP per capita, by region and year
rep1_df<- wdi %>% drop_na(gdp)
rep1_df<-rep1_df%>%
   group_by(region, date) %>%
   summarise(N=n(),
             Mean= weighted.mean(gdp,pop), ##Generating a weighted mean variable for gdp
             SD= sd(gdp), ##Generating a standard deviation variable for gdp
             Min= min(gdp),
             Max= max(gdp))

#FINAL OUTPUT
write.csv(rep1_df, "ReplicateDF_Q1.csv", row.names=FALSE)
#Checking similarity to original data
org1_df <- readr::read_rds(paste0(data_url, "wdi_summ_out.Rds"))
waldo::compare(rep1_df, org1_df)
```

2.  Aggregate stats
```{r}
#Checking data to replicate 
org2_df<- readr::read_rds(paste0(data_url, "wdi_agg_out.Rds"))

#Generating new dataset with descriptive statistics of gdp, lifeex, and pov_intl by region and year
rep2_df<- collap(wdi, by = ~ region + date, 
       custom = list(fmean = .c(lifeex, gdp, pov_intl), ## Generating variables with the corresponding means
                     fsd = .c(lifeex, gdp, pov_intl), ## Generating variables with the correspoding standard dev.
                     fmax_uw = .c(lifeex, gdp, pov_intl), 
                     fmin_uw = .c(lifeex, gdp, pov_intl),
                     fmedian = .c(lifeex, gdp, pov_intl)),
       w = ~ pop) ##using population weights

#Converting each dataframe to long format, for the three measures
rep2_df_gdp <- rep2_df %>%
  gather(estimate, gdp, fmean.gdp:fmedian.gdp, factor_key=TRUE)
rep2_df_lifeex <- rep2_df %>%
  gather(estimate, lifeex, fmean.lifeex:fmedian.lifeex, factor_key = TRUE)
rep2_df_povintl <- rep2_df %>%
  gather(estimate, pov_intl, fmean.pov_intl:fmedian.pov_intl, factor_key = TRUE)

#Keeping only necessary variables for each dataframe (estimate, region, date, pop and gdp)
rep2_df_gdp = rep2_df_gdp[c("estimate","region", "date", "pop", "gdp")]
rep2_df_lifeex = rep2_df_lifeex[c("estimate","region", "date", "pop", "lifeex")]
rep2_df_povintl = rep2_df_povintl[c("estimate","region", "date", "pop", "pov_intl")]

#Cleaning up estimate variable for the dataframe for estimates of GDP variable
rep2_df_gdp$estimate <- gsub(".*fmean.*", "Mean", rep2_df_gdp$estimate)
rep2_df_gdp$estimate <- gsub(".*fsd.*", "SD", rep2_df_gdp$estimate)
rep2_df_gdp$estimate <- gsub(".*fmin.*", "Min", rep2_df_gdp$estimate)
rep2_df_gdp$estimate <- gsub(".*fmax.*", "Max", rep2_df_gdp$estimate)
rep2_df_gdp$estimate <- gsub(".*fmedian.*", "Median", rep2_df_gdp$estimate)
#Cleaning up estimate variable for the dataframe for estimates of lifeex variable
rep2_df_lifeex$estimate <- gsub(".*fmean.*", "Mean", rep2_df_lifeex$estimate)
rep2_df_lifeex$estimate <- gsub(".*fsd.*", "SD", rep2_df_lifeex$estimate)
rep2_df_lifeex$estimate <- gsub(".*fmin.*", "Min", rep2_df_lifeex$estimate)
rep2_df_lifeex$estimate <- gsub(".*fmax.*", "Max", rep2_df_lifeex$estimate)
rep2_df_lifeex$estimate <- gsub(".*fmedian.*", "Median", rep2_df_lifeex$estimate)
#Cleaning up estimate variable for the dataframe for estimates of pov_intl variable
rep2_df_povintl$estimate <- gsub(".*fmean.*", "Mean", rep2_df_povintl$estimate)
rep2_df_povintl$estimate <- gsub(".*fsd.*", "SD", rep2_df_povintl$estimate)
rep2_df_povintl$estimate <- gsub(".*fmin.*", "Min", rep2_df_povintl$estimate)
rep2_df_povintl$estimate <- gsub(".*fmax.*", "Max", rep2_df_povintl$estimate)
rep2_df_povintl$estimate <- gsub(".*fmedian.*", "Median", rep2_df_povintl$estimate)

#Merging dataframes made for each measure, to get the final replicated dataframe with all three measures and the estimates required (mean, SD, min, max and median)
merged <- merge(rep2_df_gdp, rep2_df_lifeex, by=c("estimate","region", "date", "pop"))
rep2_df <- merge(merged, rep2_df_povintl, by=c("estimate","region", "date", "pop"))
rm(merged, rep2_df_, rep2_df_gdp, rep2_df_lifeex, rep2_df_povintl)

#FINAL OUTPUT
write.csv(rep2_df, "ReplicateDF_Q2.csv", row.names=FALSE)
#Checking for similarity with original datagrame
waldo::compare(rep2_df, org2_df)
```

3.  Find outliers

```{r}
org3_df<-readr::read_rds(paste0(data_url, "wdi_outliers_out.Rds"))

#Generating dataset with mean and sd of lifeex, gdp and gini
df_summary <- wdi %>% 
  group_by(date) %>% 
  summarise(gdp.mean = weighted.mean(gdp, pop, na.rm=TRUE), ##Generating variable with mean of GDP by year
            gini.mean= weighted.mean(gini, pop, na.rm=TRUE), ##Generating variable with mean of GINI by year
            lifeex.mean= weighted.mean(lifeex, pop, na.rm=TRUE),
            gdp.sd = sd(gdp, na.rm=TRUE), ##Generating variable with standard deviation of GDP by year
            gini.sd= sd(gini, na.rm=TRUE), ##Generating variable with standard deviation of GINI by year
            lifeex.sd= sd(lifeex, na.rm=TRUE))

#Joining original data with summary 
rep3_df <- left_join(wdi, df_summary, by = "date")

#Generating outlier identifying variables. Creating boolean variables that are TRUE if the measure is less than 2.5 standard deviations above or below the mean.
  quiet(rep3_df$ll_gdp <- print(rep3_df$gdp < rep3_df$gdp.mean - 2.5*(rep3_df$gdp.sd)))
  quiet(rep3_df$hl_gdp <- print(rep3_df$gdp > rep3_df$gdp.mean + 2.5*(rep3_df$gdp.sd)))
  quiet(rep3_df$ll_gini <- print(rep3_df$gini < rep3_df$gini.mean - 2.5*(rep3_df$gini.sd)))
  quiet(rep3_df$hl_gini <- print(rep3_df$gini > rep3_df$gini.mean + 2.5*(rep3_df$gini.sd)))
  quiet(rep3_df$ll_lifeex <- print(rep3_df$lifeex < rep3_df$lifeex.mean - 2.5*(rep3_df$lifeex.sd)))
  quiet(rep3_df$hl_lifeex <- print(rep3_df$lifeex > rep3_df$lifeex.mean + 2.5*(rep3_df$lifeex.sd)))

#FINAL OUTPUT
write.csv(rep3_df, "ReplicateDF_Q3.csv", row.names=FALSE)
#Checking for similarity with original datagrame
waldo::compare(rep3_df, org3_df)
```
